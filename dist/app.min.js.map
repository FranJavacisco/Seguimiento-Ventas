{"version":3,"sources":["app.js"],"names":["db","salesData","initDB","request","indexedDB","open","onerror","event","onsuccess","target","result","loadSalesData","onupgradeneeded","keyPath","autoIncrement","transaction","objectStore","value","input","replace","Intl","NumberFormat","format","discountIVA","amount","parseFloat","document","getElementById","warrantyAmount","insuranceAmount","saveSale","Date","saleRecord","dateString","saleAmount","toLocaleTimeString","add","push","updateIndicators","record","textContent","toFixed","toLocaleString","clearFields","downloadReport","reportData","map","getAll","Descripción","productDescription","Monto de Seguro","Monto de Venta Neto (sin IVA)","Monto de Garantía Neto (sin IVA)","Monto de Seguro Neto (sin IVA)","% Cruce","worksheet","XLSX","utils","json_to_sheet","workbook","book_new","writeFile","guardarVenta","montoVenta","montoGarantia","montoSeguro","descripcion","fecha","regeneratorRuntime","async","_context","prev","next","awrap","collection","firebase","firestore","Timestamp","fromDate","t0","stop","obtenerVentas","_context2","orderBy","get","sent","forEach","doc","venta","data","console","log","error"],"mappings":"aAAA,IAAIA,GACAC,UAAY,GAGhB,SAASC,SAAT,IAAAC,EAAkBC,UAAAC,KAAA,UAAA,GAGdF,EAAQG,QAAU,SAACC,GAAnBJ,QAAQG,MAAU,kCAAWC,IAI7BJ,EAAQK,UAAY,SAACD,GAArBJ,GAAQK,EAARC,OAAoBC,OACdC,iBAINR,EAAQS,gBAAkB,SAACL,IAA3BJ,GAAQS,EAAAA,OAARF,QACSH,kBAAL,QAAA,CAAAM,QAAA,KAAAC,eAAA,KAC8B,SAA9BH,gBAFJX,GAAAe,YAAA,CAAA,SAAA,YAIHC,YAAA,SAEQL,SAAgBH,UAAA,SAAAD,GACfQ,UAAcf,EAAGe,OAAAA,QAAY,IAI/Bd,SAAAA,aAAkBQ,GADtB,IAAAQ,EAAAC,EAAAD,MAAAE,QAAA,MAAA,IAGHD,EAAAD,MAAA,IAAAG,KAAAC,aAAA,SAAAC,OAAAL,GAGG,SAAIA,YAAcA,GAClBC,OAAMD,EAAYG,KAGtB,SAASG,WACL,IAAOC,EAAPC,WAAAC,SAAAC,eAAA,cAAAV,MAAAE,QAAA,MAAA,MAAA,EACHS,EAAAH,WAAAC,SAAAC,eAAA,kBAAAV,MAAAE,QAAA,MAAA,MAAA,EAKSU,EAAkBJ,WAAWC,SAASC,eAAe,mBAAmBV,MAAME,QAAQ,MAAO,MAAQ,EAHtGW,EAAWJ,SAAAC,eAAA,sBAAAV,OAAA,kBAEVW,EAAAA,IAAcG,KAIVC,EAAV,CACMC,WAAAA,EAEAD,eAAAA,EACFE,gBAAAA,EACAN,mBAAAA,EACAC,WATEA,GAAAA,OAAkBJ,EAAAA,qBAAlBI,KAAAA,OAAsCF,EAAeQ,uBAM3DnC,GAAAe,YAAA,CAAA,SAAA,aAQMA,YAAiBA,SAAaqB,IAAAJ,GAAUxB,UAA9C,WAEIP,UAAUoC,KAAKL,GADnBjB,iBAAAiB,GACI/B,cACAqC,MAAAA,iCAIP,SAAAA,iBAAAC,GAGGb,SAASC,eAAe,eAAea,YAAcjB,YAAYgB,EAAOL,YAAYO,QAAQ,GAAGC,eAAe,SADlHhB,SAASY,eAAiBC,kBAAQC,YAAAjB,YAAAgB,EAAAX,gBAAAa,QAAA,GAAAC,eAAA,SAC9BhB,SAASC,eAAe,gBAAea,YAAcjB,YAAYgB,EAAOL,iBAAoBO,QAAGC,GAAAA,eAA/F,SACAhB,SAASC,eAAe,gBAAkBa,cAAcjB,EAAAA,eAAmBK,EAARC,iBAAmCa,EAAAA,WAAtG,KAAAD,QAAA,GAAA,IAGH,SAAAE,cAGGjB,SAASC,eAAe,cAAcV,MAAQ,GADlDS,SAASiB,eAAc,kBAAA1B,MAAA,GACnBS,SAASC,eAAe,mBAAxBV,MAAA,GACAS,SAASC,eAAe,sBAAxBV,MAAA,GAGH,SAAA2B,iBAGuB5C,GAAGe,YAAY,CAAC,SAAU,YADxBC,YAAA,SAEhBA,SAAcD,UAAYC,SAAAA,GAG5B,IAAM6B,EAAatC,EAAME,OAAOC,OAAOoC,IAAI,SAACP,GADhDvB,MAAY+B,CACFF,MAAatC,EAAME,WACduC,cAAAT,EAAAU,mBACIV,iBADJA,EAAAL,WAAAQ,eAAA,SAEHM,oBAAoBC,EAAAA,eAFjBP,eAAA,SAGHQ,kBAAyBhB,EAAAA,gBAAPQ,eAHf,SAIHS,gCAA4BvB,YAAec,EAAeR,YAJvDO,QAAA,GAAAC,eAAA,SAKHU,mCAA0CV,YAAvBH,EAAsCX,gBALtDa,QAAA,GAAAC,eAAA,SAMHW,iCAAiC9B,YAAmBW,EAAAA,iBAAuBQ,QAAAA,GAA1CA,eAN9B,SAOHY,YAAAf,EAAAX,eAAoCL,EAAYgB,iBAAuBE,EAAnCP,WAA8CQ,KAA9CD,QAAA,GAPjC,OADXc,EAAAC,KAAAC,MAAAC,cAAAb,GAcMU,EAAiBE,KAALA,MAAWC,WACvBC,KAAAA,MAAWH,kBAAWI,EAA5BL,EAAA,qBAGIC,KAACK,UAAUF,EAAU,wBAMjC,SAAeG,aAAaC,EAAYC,EAAeC,EAAaC,GAApE,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAJ,EAAA,IAAApC,KAAAuC,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAzE,GAAA0E,WAAA,UAAAtC,IAAA,CAAA2B,WAAAA,EAAAC,cAAAA,EAAAC,YAAAA,EAEYE,YAAAA,EAFZA,MAAAQ,SAAAC,UAAAC,UAAAC,SAAAX,MAAA,KAAA,EAIQJ,QAAAA,IAAAA,+BAJRO,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,MAAA,GAMQL,QAAAA,MAAAA,8BAAAA,EAAAA,IANR,KAAA,GAAA,IAAA,MAAA,OAAAK,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAgBE,SAAeC,gBAAf,OAAAb,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAV,MAAA,KAAA,EAAA,OAAAU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAAAJ,mBAAAK,MANgBzE,GAAA0E,WAAA,UAAZS,QAAA,QAAA,QAAAC,OAMJ,KAAA,EAAAF,EAAAG,KAhBFC,QAAA,SAAAC,GAAA,IAAAC,EAAAD,EAAAE,OAqBQC,QAAQC,IAAI,oBAAqBH,KALvCN,EAAAV,KAAA,GAAA,MAAA,KAAA,EAAAU,EAAAX,KAAA,EAAAW,EAAAH,GAAAG,EAAA,MAAA,GAJIQ,QAAAA,MAAQE,gCAARF,EAAAA,IAIJ,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAlBF9E","file":"app.min.js","sourcesContent":["let db;\r\nlet salesData = [];\r\n\r\n// Iniciar IndexedDB\r\nfunction initDB() {\r\n    let request = indexedDB.open(\"SalesDB\", 1);\r\n\r\n    request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos\", event);\r\n    };\r\n\r\n    request.onsuccess = (event) => {\r\n        db = event.target.result;\r\n        loadSalesData();\r\n    };\r\n\r\n    request.onupgradeneeded = (event) => {\r\n        db = event.target.result;\r\n        db.createObjectStore(\"sales\", { keyPath: \"id\", autoIncrement: true });\r\n    };\r\n}\r\n\r\nfunction loadSalesData() {\r\n    const transaction = db.transaction([\"sales\"], \"readonly\");\r\n    const objectStore = transaction.objectStore(\"sales\");\r\n\r\n    objectStore.getAll().onsuccess = (event) => {\r\n        salesData = event.target.result || [];\r\n    };\r\n}\r\n\r\nfunction formatNumber(input) {\r\n    let value = input.value.replace(/\\D/g, '');\r\n    input.value = new Intl.NumberFormat('es-ES').format(value);\r\n}\r\n\r\nfunction discountIVA(amount) {\r\n    return amount / 1.19;\r\n}\r\n\r\nfunction saveSale() {\r\n    const saleAmount = parseFloat(document.getElementById(\"saleAmount\").value.replace(/\\./g, '')) || 0;\r\n    const warrantyAmount = parseFloat(document.getElementById(\"warrantyAmount\").value.replace(/\\./g, '')) || 0;\r\n    const insuranceAmount = parseFloat(document.getElementById(\"insuranceAmount\").value.replace(/\\./g, '')) || 0;\r\n    const productDescription = document.getElementById(\"productDescription\").value || \"Sin descripción\";\r\n\r\n    const date = new Date();\r\n    const dateString = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\r\n\r\n    const saleRecord = {\r\n        saleAmount,\r\n        warrantyAmount,\r\n        insuranceAmount,\r\n        productDescription,\r\n        dateString\r\n    };\r\n\r\n    const transaction = db.transaction([\"sales\"], \"readwrite\");\r\n    transaction.objectStore(\"sales\").add(saleRecord).onsuccess = () => {\r\n        salesData.push(saleRecord);\r\n        updateIndicators(saleRecord);\r\n        clearFields();\r\n        alert(\"Venta guardada correctamente\");\r\n    };\r\n}\r\n\r\nfunction updateIndicators(record) {\r\n    document.getElementById(\"ventaSinIVA\").textContent = discountIVA(record.saleAmount).toFixed(2).toLocaleString('es-ES');\r\n    document.getElementById(\"garantiaSinIVA\").textContent = discountIVA(record.warrantyAmount).toFixed(2).toLocaleString('es-ES');\r\n    document.getElementById(\"seguroSinIVA\").textContent = discountIVA(record.insuranceAmount).toFixed(2).toLocaleString('es-ES');\r\n    document.getElementById(\"crucePercent\").textContent = ((record.warrantyAmount + record.insuranceAmount) / record.saleAmount * 100).toFixed(2) + \"%\";\r\n}\r\n\r\nfunction clearFields() {\r\n    document.getElementById(\"saleAmount\").value = '';\r\n    document.getElementById(\"warrantyAmount\").value = '';\r\n    document.getElementById(\"insuranceAmount\").value = '';\r\n    document.getElementById(\"productDescription\").value = '';\r\n}\r\n\r\nfunction downloadReport() {\r\n    const transaction = db.transaction([\"sales\"], \"readonly\");\r\n    const objectStore = transaction.objectStore(\"sales\");\r\n\r\n    objectStore.getAll().onsuccess = (event) => {\r\n        const reportData = event.target.result.map((record) => {\r\n            return {\r\n                Fecha: record.dateString,\r\n                Descripción: record.productDescription,\r\n                \"Monto de Venta\": record.saleAmount.toLocaleString('es-ES'),\r\n                \"Monto de Garantía\": record.warrantyAmount.toLocaleString('es-ES'),\r\n                \"Monto de Seguro\": record.insuranceAmount.toLocaleString('es-ES'),\r\n                \"Monto de Venta Neto (sin IVA)\": discountIVA(record.saleAmount).toFixed(2).toLocaleString('es-ES'),\r\n                \"Monto de Garantía Neto (sin IVA)\": discountIVA(record.warrantyAmount).toFixed(2).toLocaleString('es-ES'),\r\n                \"Monto de Seguro Neto (sin IVA)\": discountIVA(record.insuranceAmount).toFixed(2).toLocaleString('es-ES'),\r\n                \"% Cruce\": ((record.warrantyAmount + record.insuranceAmount) / record.saleAmount * 100).toFixed(2) + \"%\"\r\n            };\r\n        });\r\n\r\n        const worksheet = XLSX.utils.json_to_sheet(reportData);\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Reporte de Ventas\");\r\n\r\n        XLSX.writeFile(workbook, \"reporte_ventas.xlsx\");\r\n    };\r\n}\r\n\r\ninitDB();\r\n\r\nasync function guardarVenta(montoVenta, montoGarantia, montoSeguro, descripcion) {\r\n    try {\r\n      const fecha = new Date();\r\n      await db.collection(\"ventas\").add({\r\n        montoVenta,\r\n        montoGarantia,\r\n        montoSeguro,\r\n        descripcion,\r\n        fecha: firebase.firestore.Timestamp.fromDate(fecha),\r\n      });\r\n      console.log(\"Venta guardada exitosamente\");\r\n    } catch (error) {\r\n      console.error(\"Error al guardar la venta: \", error);\r\n    }\r\n  }\r\n\r\n  async function obtenerVentas() {\r\n    try {\r\n      const snapshot = await db.collection(\"ventas\").orderBy(\"fecha\", \"desc\").get();\r\n      snapshot.forEach((doc) => {\r\n        const venta = doc.data();\r\n        console.log(\"Venta registrada:\", venta);\r\n        // Lógica para mostrar cada venta en el reporte\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error al obtener las ventas: \", error);\r\n    }\r\n  }\r\n  \r\n\r\n\r\n\r\n"]}